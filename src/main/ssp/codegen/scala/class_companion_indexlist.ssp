<%
  // Copyright 2013 Foursquare Labs Inc. All Rights Reserved.

  import com.foursquare.spindle.codegen.runtime.{CodegenException, ScalaField, StructLike}
%>
<%@ val cls: StructLike %>
<%

case class IndexDescriptorEntry(field: ScalaField, indexType: String, remainder: String)

// Process index specifiers. These are used by the template to generate the appropriate Rogue index descriptors.
// TODO(tdyas): This is a first attempt at connecting the index checker and the Record V2 records. The indices
// may be better specified in hand-written code and not generated code. Should future iterations will explore this?

def partitionOnFirstMatch(str: String, seps: Seq[Char]): (String, String) = {
  val indices = seps.map(s => str.indexOf(s)).filter(_ >= 0).sortBy(x => x)
  indices.headOption match {
    case Some(i) => (str.substring(0, i), str.substring(i + 1))
    case None => (str, "")
  }
}

val indices = (for (indexSpec <- cls.annotations.getAll("index")) yield {
  val fieldSpecs = indexSpec.split("\\s*,\\s*")
  val indexEntries = (for (fieldSpec <- fieldSpecs) yield {
    val data = fieldSpec.split("\\s*:\\s*")
    if (data.size != 2) {
      throw new CodegenException("Invalid index specifier '%s'-- must be FIELD_NAME:INDEX_TYPE".format(fieldSpec))
    }

    // The "field name" actually becomes part of a Scala closure that constructs a Rogue QueryField instance.
    // Implicits are used to do that so we cannot just allow the field name. (E.g., the user may have an index
    // on a subfield using the "subfield" method added by implicits.

    val (fieldName, remainder) = partitionOnFirstMatch(data(0), Seq(' ', '.'))
    val matchingFields = cls.fields.filter(fld => fld.name == fieldName)
    val field = matchingFields match {
      case Seq(matchingField) => matchingField
      case _ => (throw new CodegenException("Unknown field name '%s' in index specifier for class %s"
        .format(fieldName, cls.name)))
    }

    val indexType = data(1).toLowerCase match {
      case "1" | "asc" | "ascending" => "com.foursquare.index.Asc"
      case "-1" | "desc" | "descending" => "com.foursquare.index.Desc"
      case "2d" | "twod" => "com.foursquare.index.TwoD"
      case _ => throw new CodegenException("Unknown index type specifier '%s'".format(data(1)))
    }

    IndexDescriptorEntry(field, indexType, if (remainder.nonEmpty) ("." + remainder) else "")
  })

  if (indexEntries.size > 6) {
    throw new CodegenException("Too many index entries (> 6) for index specifier. Go extend Rogue first.")
  }

  indexEntries
})
%>\
